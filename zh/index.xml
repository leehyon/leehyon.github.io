<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Kohsruhe</title><link>https://www.kohsruhe.com/zh/</link><description>Recent content on Kohsruhe</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Wed, 30 Nov 2022 08:49:24 +0800</lastBuildDate><atom:link href="https://www.kohsruhe.com/zh/index.xml" rel="self" type="application/rss+xml"/><item><title>韭菜预案 #1130 - 抓紧时间回血</title><link>https://www.kohsruhe.com/zh/2022/11/30/daily-plan-1130/</link><pubDate>Wed, 30 Nov 2022 08:49:24 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/30/daily-plan-1130/</guid><description>盘面 指数跳空向上突破，主板强势，量放大到接近一万亿，上证接下来大概率没什么问题，专注主流个股机会，能和指数共振的还是地产链。 情绪上日内偏向高</description><content:encoded><![CDATA[<h2 id="盘面">盘面</h2>
<p>指数跳空向上突破，主板强势，量放大到接近一万亿，上证接下来大概率没什么问题，专注主流个股机会，能和指数共振的还是<strong>地产链</strong>。</p>
<p>情绪上日内偏向高潮，对于周三来说前排应该会继续强势，后排跟风有可能会冲高回落，但行情在这是没必要害怕的，如果是短线就积极往前切。题材上地产带动地产链然后带动金融，然后旅游消费和医药同样是放开逻辑驱动，核酸是不能做了，抗原往上走，细分逻辑不一样。</p>
<p>地产要么强上要么早盘看看分歧再上，但买点不会很舒服。金融上留意宁波银行是否有个吸入机会。消费主要是日内各种消息比如让老年人打疫苗，不过这个板块持续性比较差。医药日内抗原检测最强，几个核心票冲高回落，但趋势还在，尤其是特一，看是否有二波低吸机会。另外关注九安能否涨上去，毕竟体量大对整个板块影响还是很大的。赛道股日内最弱，看看是否有轮动吧。钠电池看看传艺科技、维科技术等，复合铜箔看看胜利精密（出了公告直接涨停）。</p>
<h2 id="策略">策略</h2>
<p>指数怎么走还是看成交量。不要摸一些过于偏的票，要么高要么低，高有辨识度，低讲究安全边际。最近老赛道就不要碰了，新赛道钠电池这些还是比较热的。海风和TPCON是出利润的，但市场就是短期不认，能有什么办法。但切记一点，如果交易不太灵活，能吃一点就一点，在市场热的时候不要乱试，只在市场冷清的时候试自己的交易模式，有汤喝就行。</p>
]]></content:encoded></item><item><title>韭菜预案 #1129 - 关注指数共振</title><link>https://www.kohsruhe.com/zh/2022/11/29/daily-plan-1129/</link><pubDate>Tue, 29 Nov 2022 08:37:01 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/29/daily-plan-1129/</guid><description>前言 周一指数恐慌低开，日内来回来不少，成交量继续萎缩，可视为短期底部。但情绪上并不差，人气股都有轮动，没有低开低走，马上到十二月，应该会有一</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>周一指数恐慌低开，日内来回来不少，成交量继续萎缩，可视为短期底部。但情绪上并不差，人气股都有轮动，没有低开低走，马上到十二月，应该会有一个情绪和指数共振向上的机会。</p>
<p>题材还是轮动，地产日内继续走强，昨晚还有一个放开融资的利好，周二超大概率是走加速的。地产股博弈的是超级充分的，而地产链很多票还趴在地上没有所谓的利好兑现一说。医药还是分支轮动，高潮不追恐慌低吸就行。中成药以岭稳稳的，特一反包，新冠检测这几天差一点，目前炒的还是抗原检测，核酸已经没人看了，主要看泰林和九安。目前北京卫健委和学习强国的表态，他们是有意引导舆论从核酸向抗原转移，如果要转换应该是个强转换。信创走的差一点，几个票都是冲高回落。赛道股看的是新技术和储能，新技术主要是复合铜箔、钠电池这些。现在医药退潮的主跌阶段已经走完，又酝酿了一些反抽和二波预期同时低位轮动还在继续，就可以说是试错的一个新周期。另外昨天补缺而没有下杀，则认为这个缺口是有效的。</p>
<h2 id="策略">策略</h2>
<p>重点看地产股周二怎么反应的，如果高开高走迅速封板且板住了，那就没问题。如果高开低走，那么就要关注消费股能否撑起来，撑起来也没问题。就怕都不能承接，只能看赛道了，这就有点困难了。当下应该关注什么板块能跟指数一起往上走，那很有可能是这个小周期的主线（一周），留意看看能博弈出什么东西。</p>
]]></content:encoded></item><item><title>韭菜预案 #1128 - 耐心等待未来</title><link>https://www.kohsruhe.com/zh/2022/11/28/daily-plan-1128/</link><pubDate>Mon, 28 Nov 2022 09:15:35 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/28/daily-plan-1128/</guid><description>复盘 周五盘面二八分化，主板在金融地产国改带领下是小阳线，而创业板下跌趋势明显。另外短线投机也难做，前一天高潮隔日就杀跌比如医药，轮动速度太快</description><content:encoded><![CDATA[<h2 id="复盘">复盘</h2>
<p>周五盘面二八分化，主板在金融地产国改带领下是小阳线，而创业板下跌趋势明显。另外短线投机也难做，前一天高潮隔日就杀跌比如医药，轮动速度太快，操作难度较大。短线控制回撤为主，再有三个交易日就到12月了，最好指数能再杀一下，更好有利于反弹，还是看看那个缺口吧。</p>
<p>地产周五最强，连续消息刺激推动，持续性有待观察，核心是中交地产、中国武夷、新城控股。国企改革方向周五也算回流了，核心大票中国联通和中国交建是反包向上。医药走弱，预期后面还会轮动。</p>
<p>十二月带头方向很重要，如果创业板带队那可以高看一眼。如果做短线就看有什么新题材，第一时间参与进去，肯定不会错的。中线思路还是赛道股躺平。如果后面指数走强，能和<strong>指数共振</strong>很重要。</p>
<h2 id="策略">策略</h2>
<p>短线不能说是安全了，特别是叠加周末各种纷繁复杂的消息，盘面可能更加羸弱。因为这个事件肯定有3到6个月的混乱期，不仅包括上层还有基层的无所适从。当下市场轮动属性比较明显，注意各个题材的轮动节奏。耐心等待未来新的赚钱效应，而新的赚钱效应大概率是伴随指数共振的，如果不共振，那强度大概也不会大。</p>
]]></content:encoded></item><item><title>韭菜预案 #1125 - 看好海风发酵</title><link>https://www.kohsruhe.com/zh/2022/11/25/daily-plan-1125/</link><pubDate>Fri, 25 Nov 2022 09:01:31 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/25/daily-plan-1125/</guid><description>盘面 周四指数继续横盘整理，市场缩量显得比较颓势，但有回暖的迹象。投机连板依旧做不起来，日内题材还是一个轮动节奏。 医药回流，中成药和新冠检测表</description><content:encoded><![CDATA[<h2 id="盘面">盘面</h2>
<p>周四指数继续横盘整理，市场缩量显得比较颓势，但有回暖的迹象。投机连板依旧做不起来，日内题材还是一个轮动节奏。</p>
<p>医药回流，中成药和新冠检测表现是最强的，但这东西不好接力，九安和以岭都是名牌中的名牌，而且九安是有订单支撑的。</p>
<p>赛道股里储能和钠电池细分比较强。钠电池和PET铜箔属于新技术，在赛道中炒新技术最欢迎，之前光伏中的TPCON和HJT，现在炒钠电池，这些都是会反复的，这里可以看指数节奏等低吸。储能看科字辈（科华数据，科士达等），钠电池传艺科技、维科技术是趋势核心，日内情绪和盘面都是比较热闹的。PET铜箔关注英联股份，双薪新材，HJT的看宝馨科技。</p>
<p>国改中字头呈现一个单边走弱的分歧，板块走的不强，周五或周一可能等一个回流，低吸但风险回报比不高，不是一个主流的方向，如果要做主流还不如去信创或医药。</p>
<p>信创表现是最差的，基本上还是老题材的轮动，做起来不会很舒服，耐心等。要做的话选股难度比较大，留意之前那些标还有电科网安。</p>
<p>房地产借利好回流，还是一个轮动。</p>
<p>正常讲周五收阳的概率会大一点。</p>
<p>提一个海风的消息，上海发改委发了一个深远海补贴方案，深远海离岸距离大于50海里，项目奖励5000元/千瓦。这个力度还是挺高的，随着利好政策的不断放出，明年景气度是可以的。之前说了，如果博弈不了信创，可以去赛道里的新技术和海风躺着装死。</p>
<h3 id="钠电池">钠电池</h3>
<p>最近很多投机资金也转向价值投机。其实他们还是装模做样做基本面研究，更多是事件驱动叠加胡乱分析。</p>
<p>我理解真正的基本面其实没那么复杂和细节。真正的基本面是基于一种正向的产业趋势引发的一种增量成长，在这种趋势没有被证伪或没有形成格局之前，一切都是杂音一切都是波动。任何一个新技术的发展都是这么一个过程：需求发现、技术突破、产业化然后格局形成，所以这种题材结束只有两种情况：一种是技术被证伪，产业化失败；另外就是产业化形成，然后估值降低低。</p>
<p>所以不管什么新技术，有预期干就完事了。</p>
]]></content:encoded></item><item><title>韭菜预案 #1124 - 风险尚未释放</title><link>https://www.kohsruhe.com/zh/2022/11/24/daily-plan-1124/</link><pubDate>Thu, 24 Nov 2022 08:53:15 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/24/daily-plan-1124/</guid><description>盘面 周三是缩量企稳的一天，赛道股午后发力带领指数上扬。大结构应该还是振荡，只是情绪弱，但指数没特别弱。情绪退潮后，高位个股是重灾区、亏钱效应</description><content:encoded><![CDATA[<h2 id="盘面">盘面</h2>
<p>周三是缩量企稳的一天，赛道股午后发力带领指数上扬。大结构应该还是振荡，只是情绪弱，但指数没特别弱。情绪退潮后，高位个股是重灾区、亏钱效应很大，短线的情绪投机比较难做。市场选择了一个纯低位的中字头和调整一段时间的赛道股。短期控制回撤为主，等情绪选择方向再说。</p>
<p>昨天中字头中国企改革最强。中国交建特别关键，是可以容纳50亿的。目前看空间不是很大，只是一个过渡题材，后续可以作为加分项去看，尤其在监管持续打压下，如果要炒妖股看看它是否叠加国企改革。</p>
<p>医药主跌，看快速杀跌后是否有个反抽的机会，可参与可不参与，一来涨多了一来防疫政策的摇摆，最好调整到20日附近看看。</p>
<p>信创也是大幅分歧，不过几个核心标的算是企稳，中国软件，深桑达几个票是抗跌的，后续反弹重点观察。</p>
<p>赛道股中风电偏弱，储能中的钠电池最强，光伏中电池片也很强。</p>
<h2 id="策略">策略</h2>
<p>投机连板方向：最近批量跌停，资金抓住为数不多几票要么猛搞要么猛跑。一般来说短线杀跌默契，主跌浪一般两到四天，至于后面是横盘还是阴跌不好说，而且最近市场受监管影响较大，资金也比较谨慎。</p>
<p>继续用防守心态迎接。</p>
<p>昨天发布了关于地产的两个消息。地产自己是不会参与的，博弈的过于充分，地产链另说。</p>
<p>昨天看赛道是冰点走出来的，应该多关注点。但赛道股反复反抽，很难形成共识，另外赛道股也是要走一个趋势，很难情绪爆发。</p>
]]></content:encoded></item><item><title>韭菜预案 #1123 - 短线继续防守</title><link>https://www.kohsruhe.com/zh/2022/11/23/daily-plan-1123/</link><pubDate>Wed, 23 Nov 2022 08:51:30 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/23/daily-plan-1123/</guid><description>盘面 周二信创有向下破位的趋势，医药也比较弱，总体来说退潮算是开始了，对于高位股少点幻想、控制回撤。 昨天中字头国企午盘爆拉，目前成交量是承接不</description><content:encoded><![CDATA[<h2 id="盘面">盘面</h2>
<p>周二信创有向下破位的趋势，医药也比较弱，总体来说退潮算是开始了，对于高位股少点幻想、控制回撤。</p>
<p>昨天中字头国企午盘爆拉，目前成交量是承接不了这么大板块起来的，流动性是不支持。核心标的中国联通，跟风的看看中国交建，今天看如果承接好的话低吸同类标的，优先看小标。</p>
<p>医药这里还是大分歧，特一横盘，以岭和神奇大阴线，总体来说大行情应该是没了，看看以岭每天成交近百亿，它如果往下走，谁还能拉起来呢。非要看，观察下医药新基建比如鱼跃等能否反包吧。信创是越来越弱了，重组的美丽云也是叠加了央企改革，总体板块机会很少。</p>
<p>目前节点，如何能做出市场要调整、短线要谨慎的预判？</p>
<ul>
<li>连续反弹多了是有回踩的必要的</li>
<li>分歧反复高潮后调整、没有一个正式的主线，如果连续高潮的（有主线情况）可以发掘小票继续做。目前是一波流，非良性的调整</li>
<li>再次板块热点是什么，比如医药能被挖掘的分支都被挖掘过了，如果老主线出现疲态而又没有新的主线出现，调整是顺理成章的</li>
</ul>
<h2 id="策略">策略</h2>
<p>板块退潮时怎么博弈？</p>
<ul>
<li>短期博弈角度：既有主线的活口低吸，预期新的板块，看盘中能带一带情绪冲高（尾盘不清楚）</li>
<li>诗和远方的角度：放到明年，看看哪些景气赛道。比如信创目前有可能仅是预热，而海风光伏储能明年还是有支撑的</li>
</ul>
]]></content:encoded></item><item><title>韭菜预案 #1122 - 静待缺口回补</title><link>https://www.kohsruhe.com/zh/2022/11/22/daily-plan-1122/</link><pubDate>Tue, 22 Nov 2022 12:07:03 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/22/daily-plan-1122/</guid><description>盘面 昨天指数探底回升，回踩了缺口，但是没有补上，整体缩量到了8500亿，看似有点跌不动，可能会在缺口附近横盘震荡，交易难度增加，下旬依旧谨慎</description><content:encoded><![CDATA[<h2 id="盘面">盘面</h2>
<p>昨天指数探底回升，回踩了缺口，但是没有补上，整体缩量到了8500亿，看似有点跌不动，可能会在缺口附近横盘震荡，交易难度增加，下旬依旧谨慎。</p>
<p>日内信创和医药都有轮动。医药依旧最强，特一继续低开拉板，可以持续关注，其他低位炒作的都是些三四月份老票，比如九安和中国医药。总之医药是主流，但节奏很重要，避免踩到分歧。信创方面继续分歧，午后有回流，榕基反包。中国长城、太极有待继续观察，看能否带一带情绪。</p>
<p>短期盘面到了一个尴尬的地步，防控出现了钟摆，而且回摆有点多，原先预期慢慢修正，结果直接封城。没有更好的方向，短期是一个风险，前强都已经发力了，后边也没有苗头指引主线，偏向防守。</p>
]]></content:encoded></item><item><title>韭菜预案 #1121 - 混乱期须谨慎</title><link>https://www.kohsruhe.com/zh/2022/11/21/daily-plan-1121/</link><pubDate>Mon, 21 Nov 2022 13:06:11 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/21/daily-plan-1121/</guid><description>盘面 上周五横盘振荡，指数冲高回落。信创个股出现大跌。如果信创和医药这两条最强主线崩了，那么短线机会要少很多。11月下旬要谨慎，另外世界杯开幕</description><content:encoded><![CDATA[<h2 id="盘面">盘面</h2>
<p>上周五横盘振荡，指数冲高回落。信创个股出现大跌。如果信创和医药这两条最强主线崩了，那么短线机会要少很多。11月下旬要谨慎，另外世界杯开幕了，交易量下行的魔咒不知道能否逃掉。</p>
<p>近期板块轮动很快，指数大概率会回补缺口，但情绪又很难两天都是差的，也很难两天大好。板块内的核心标对板块走势影响很大，是大于指数的。</p>
<h3 id="失误">失误</h3>
<p>盘中卖了医药买了一手中国软件，结果白给，后面继续下行，所以说恐慌低吸，一两个点不叫恐慌。</p>
<h2 id="题材">题材</h2>
<ul>
<li>医药：众生代表空间，以岭代表容量，观察核心票，谨慎再次拉升的一个反水，要做也是围绕这几个核心票做<strong>恐慌</strong>低吸。</li>
<li>信创：中国长城周五炸板回落，接下来板块应该会有反复，注意恐慌低吸。如果中国软件、深桑达能稳住，看是否有个补涨带一波氛围。</li>
</ul>
<h2 id="策略">策略</h2>
<ul>
<li>短线谨慎，至少到月末。市场目前一直没有明确主线，而且很多资金在埋伏美联储，或疫情放开等预期，这些资金会形成短期压制。短线有能力做一做恐慌低吸，注意是那种杀崩低吸，不是跌一两个点的低吸。</li>
<li>中期还是多头。现在这个节点非要参与，可以放长做中线，比如景气赛道：光伏和海风。这些景气度一直在，总会起来的。</li>
</ul>
<h2 id="话题">话题</h2>
<h3 id="疫情放开">疫情放开</h3>
<ul>
<li>一旦放开就很难再封，迟早是要放开的。</li>
<li>参考海外放开节奏：3-4个月会有一段混乱期，需要磨合，经济不会一下子起来。</li>
</ul>
<h3 id="港股">港股</h3>
<p>港股就关注三大块：</p>
<ul>
<li>稳增长系列：地产链</li>
<li>疫情放开消费修复：黄金珠宝医药服饰等</li>
<li>互联网经济：海外风险下降，政策放宽</li>
</ul>
<p>这个点不建议做地产了，已经修复差不多了，没多少预期。可以做做海伦司，海底捞这些疫后消费票。</p>
]]></content:encoded></item><item><title>ARM 编译器入门</title><link>https://www.kohsruhe.com/zh/2022/11/21/arm-compiler-for-embedded/</link><pubDate>Mon, 21 Nov 2022 11:20:20 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/21/arm-compiler-for-embedded/</guid><description>前言 this is an incomplete article</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<ul>
<li><input disabled="" type="checkbox"> this is an incomplete article</li>
</ul>
]]></content:encoded></item><item><title>如何构建 CMake 项目</title><link>https://www.kohsruhe.com/zh/2022/11/21/building-with-cmake/</link><pubDate>Mon, 21 Nov 2022 11:08:04 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/21/building-with-cmake/</guid><description>前言 this is an incomplete article</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<ul>
<li><input disabled="" type="checkbox"> this is an incomplete article</li>
</ul>
]]></content:encoded></item><item><title>Git 子模块使用</title><link>https://www.kohsruhe.com/zh/2022/11/21/git-submodule-guide/</link><pubDate>Mon, 21 Nov 2022 10:50:19 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/21/git-submodule-guide/</guid><description>前言 克隆他人项目时，有时候会看到仓库目录下有一个.gitmodules的文本文件，打开后有如下类似内容： [submodule &amp;#34;foo/bar&amp;#34;] path = foo/bar url = https://example.com/foo.git branch = dev 上述内容表面该</description><content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>克隆他人项目时，有时候会看到仓库目录下有一个<code>.gitmodules</code>的文本文件，打开后有如下类似内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>submodule <span class="s2">&#34;foo/bar&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">	<span class="nv">path</span> <span class="o">=</span> foo/bar
</span></span><span class="line"><span class="cl">	<span class="nv">url</span> <span class="o">=</span> https://example.com/foo.git
</span></span><span class="line"><span class="cl">	<span class="nv">branch</span> <span class="o">=</span> dev
</span></span></code></pre></div><p>上述内容表面该仓库使用了<code>git submodule</code>方式链接了其他仓库。如果要使用被链接的仓库，需要用以下命令进行初始化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git submodule update --init --recursive
</span></span></code></pre></div><h2 id="为什么使用git子模块">为什么使用Git子模块</h2>
<p>其实背后的思想是模块化设计：</p>
<ul>
<li>根据代码功能或维护周期把项目拆分成不同的子模块，并建立不同的Git仓库</li>
<li>一个模块能被多处使用，通过<code>git submodule</code>进行关联</li>
<li>主模块不必负责子模块的维护，只在必要时候同步更新</li>
</ul>
<p>另外，如果项目依赖一个开源的第三方库时，也建议将第三方库设置为子模块。</p>
<h2 id="主要内容">主要内容</h2>
<ul>
<li>添加子模块到仓库并不会把子模块的源码添加进来，只是添加子模块的信息，比如<code>url</code>和<code>branch</code></li>
<li>添加后的子模块不会随子模块仓库的更新而自动更新，以保证主仓库的稳定性</li>
</ul>
<h3 id="添加子模块">添加子模块</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git submodule add &lt;submodule_url&gt; &lt;path&gt;
</span></span></code></pre></div><p>执行添加命令成功后，可以在当前路径中看到一个<code>.gitsubmodule</code>文件，里面的内容就是子模块的信息。</p>
<p>如果在添加子模块的时候想要指定分支，可以利用<code>-b</code>参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git submodule add -b &lt;branch&gt; &lt;url&gt; &lt;path&gt;
</span></span></code></pre></div><p>添加之后，仓库<code>&lt;path&gt;</code>目录下不会有任何变化，需要执行下面命令才会添加源码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git submodule update --init --recursive
</span></span></code></pre></div><h3 id="更新子模块">更新子模块</h3>
<p>如果子模块仓库更新了，如有必要，需要手动进行更新，即进入子模块目录，执行<code>git pull</code>命令。</p>
<h3 id="删除子模块">删除子模块</h3>
<p>网上搜到的方法有点繁琐，其实可以使用<code>git submodule deinit</code>命令进行“优雅”删除：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git submodule deinit &lt;submodule_name&gt;
</span></span><span class="line"><span class="cl">$ git rm &lt;submodule_name&gt;
</span></span></code></pre></div><p>这个命令如果添加上参数<code>--force</code>，则子模块工作区内即使有本地的修改，也会被移除。</p>
]]></content:encoded></item><item><title>Git 快速上手</title><link>https://www.kohsruhe.com/zh/2022/11/20/git-quick-guide/</link><pubDate>Sun, 20 Nov 2022 16:59:39 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/20/git-quick-guide/</guid><description>♪ 超人 - 五月天 前言 本文主要内容参考自Git教程 - 廖雪峰的官方网站，同时结合自己的使用习惯稍作修改。 对任何软件的使用，首先要明确自己的需求，虽</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audio/life_live.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>♪ 超人 - 五月天</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>本文主要内容参考自<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站</a>，同时结合自己的使用习惯稍作修改。</p>
<p>对任何软件的使用，首先要<strong>明确自己的需求</strong>，虽然我之前就知道Git，但直到最近由于工作需要才开始接触命令行操作，一旦会了就基本告别GUI了。其次是<strong>抓住软件的底层逻辑</strong>，比如Git的核心是stage（暂存区）和指针，明白这两个概念，其他很多内容都不言自明了。</p>
<h2 id="git是什么">Git是什么</h2>
<p>Git是目前世界上最先进的<strong>分布式</strong>版本控制系统，即Distributed Version Control System (DVCS)，由大神Linus开发完成，他同时也是开源Linux创建者。</p>
<h3 id="集中式和分布式">集中式和分布式</h3>
<p>集中式版本控制系统，顾名思义是有一个中央服务器存储你的版本库。每次版本的更新和提交都需要你连接和上传到中央服务器。</p>
<p>而分布式版本控制系统没有中央服务器的概念，<strong>每个人的本地电脑都是一个完整的版本库</strong>，版本的更新和提交都发生在你自己的电脑上。</p>
<p>现在请思考：</p>
<ul>
<li>如果每个人的电脑都有一个完整的版本库，那么该怎么实现多人协作？</li>
<li>相比集中式，分布式有什么优点？</li>
</ul>
<h2 id="安装和配置">安装和配置</h2>
<p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads">下载安装程序</a>，然后按默认选项安装即可。</p>
<p>安装完成后，右键开始菜单找到<code>Git Bash</code>，弹出一个带颜色的命令行窗口，输入<code>git -v</code>能查到版本信息就代表安装成功。</p>
<h3 id="用户信息配置">用户信息配置</h3>
<p>安装完成后的第一步是配置你的个人信息，因为Git是分布式的，每台电脑需要自报家门。</p>
<p>在命令行输入以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git config --global user.name <span class="s2">&#34;Your Name&#34;</span>
</span></span><span class="line"><span class="cl">$ git config --global user.email <span class="s2">&#34;email@example.com&#34;</span>
</span></span></code></pre></div><blockquote>
<p>你的信息保存在全局配置文件<code>~/.gitconfig</code>中，你也可以通过<code>git config --list</code>命令确认你的信息。</p>
</blockquote>
<p>命令中的<code>--global</code>参数，表示你这台电脑上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<ul>
<li>即在需要单独配置的仓库源目录下运行<code>git config</code>命令，省略<code>--global</code></li>
</ul>
<h2 id="版本管理">版本管理</h2>
<blockquote>
<p>版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
</blockquote>
<h3 id="创建版本库">创建版本库</h3>
<p><code>git init</code>命令可以把一个目录变成Git可以管理的仓库。</p>
<ul>
<li>创建后，该目录下会多一个<code>.git</code>的子目录，这个目录是Git来跟踪管理版本库的，该目录默认隐藏</li>
</ul>
<h3 id="添加和修改">添加和修改</h3>
<p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，而<code>git diff</code>命令可以对比修改的内容。</p>
<p>提交修改和提交新文件是一样的两步（从这里可以看出Git跟踪的是<strong>修改</strong>而不是文件），先<code>git add</code>，再<code>git commit</code>。</p>
<ul>
<li><code>git add .</code>可以添加所有的修改</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s2">&#34;# Git is fun&#34;</span> &gt;&gt; README.md
</span></span><span class="line"><span class="cl">$ git add README.md
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;add readme&#34;</span>
</span></span></code></pre></div><h3 id="版本控制">版本控制</h3>
<p><code>git log</code>命令显示从最近到最远的提交日志。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">leehyon@Kohs-MacBook kohsruhe % git log
</span></span><span class="line"><span class="cl">commit fa9c94b19b0347a61c5e72b556947d9f86fefb21 <span class="o">(</span>HEAD -&gt; main, origin/main<span class="o">)</span>
</span></span><span class="line"><span class="cl">Author: Leehyon Koh &lt;leehyon@live.com&gt;
</span></span><span class="line"><span class="cl">Date:   Sun Nov <span class="m">20</span> 16:43:58 <span class="m">2022</span> +0800
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">test</span> aliyun image hub
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">commit 7381263185e996491d84cde9f15520fe88afb379
</span></span><span class="line"><span class="cl">Author: Leehyon Koh &lt;leehyon@live.com&gt;
</span></span><span class="line"><span class="cl">Date:   Sun Nov <span class="m">20</span> 14:24:38 <span class="m">2022</span> +0800
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    add first article
</span></span></code></pre></div><p><code>commit</code>后面跟的一大串数字就是版本号，即<code>commit id</code>。</p>
<ul>
<li>思考：为什么Git的版本号不像SVN一样以数字迭代的？</li>
</ul>
<p>那么有了版本号是不是可以在不同版本间跳转了呢？那的确是的。不过Git必须首先知道当前是哪个版本。</p>
<p>在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交的<code>fa9c9...</code>，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本请写成<code>HEAD~100</code>。</p>
<p>使用<code>git reset</code>命令，并添加<code>Head</code>信息或指定版本号来实现版本回退：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git reset --hard HEAD^  <span class="c1"># 回退到上一版本</span>
</span></span><span class="line"><span class="cl">$ git reset --hard <span class="m">73812</span>  <span class="c1"># 或指定版本号</span>
</span></span></code></pre></div><p>Git的版本回退速度非常快，因为它仅仅更改了<code>HEAD</code>的指向。这里是重点，后面提到的<strong>分支管理</strong>也是基于指针的操作。</p>
<p>思考：回到过去后，突然反悔了又想回到未来怎么办？</p>
<ul>
<li>Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令，找到需要返回的<code>commit id</code></li>
</ul>
<h2 id="核心逻辑一暂存区">核心逻辑一：暂存区</h2>
<p><code>.git</code>目录是Git的版本库，里面存了非常重要的两个东西：</p>
<ul>
<li>一是被称为stage的暂存区</li>
<li>二是Git自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个<code>HEAD</code>指针</li>
</ul>
<p><img src="https://kohsruhe-image.oss-cn-shanghai.aliyuncs.com/images/stage.png" alt="Stage"></p>
<p>前面讲了我们把文件往Git版本库里添加是分两步执行的：</p>
<ol>
<li><code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区</li>
<li><code>git commit</code>提交修改，实际上就是把暂存区的所有内容提交到当前分支</li>
</ol>
<p>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是<strong>修改</strong>，而非文件。每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>git commit</code>中。</p>
<p>思考：什么是修改？什么又是文件？</p>
<h3 id="撤销修改">撤销修改</h3>
<p>先看下面一条命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout -- README.md
</span></span></code></pre></div><p>意思是，把<code>README.md</code>文件在工作区的修改全部撤销，这里有两种情况：</p>
<ol>
<li><code>README.md</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态</li>
<li><code>README.md</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态</li>
</ol>
<p><code>git checkout -- &lt;file&gt;</code>命令中的“<code>--</code>”很重要，没有“<code>--</code>”，就变成了“切换到另一个分支”。</p>
<ul>
<li>一种可选的方法是：用<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区</li>
</ul>
<p>注意：这里所指的撤销都是基于还没有<code>git commit</code>的。</p>
<p>每次在撤销或修改操作时，建议先用<code>git status</code>查看仓库状态。</p>
<p>思考：如果已经把暂存区提交到了版本库了，该怎么办？</p>
<h2 id="远程仓库">远程仓库</h2>
<p>GitHub是基于Git的一个面向开源及私有软件项目的<strong>托管平台</strong>。除了GitHub，其他的还有比如<a href="https://about.gitlab.com/">GitLab</a>和<a href="https://gitee.com/">Gitee</a>等。</p>
<h3 id="配置ssh">配置SSH</h3>
<p>由于本地仓库和GitHub仓库之间的传输是通过SSH协议加密的，所以需要首先配置SSH。配置过程参考<a href="https://docs.github.com/en/enterprise-server@3.7/authentication/connecting-to-github-with-ssh">官方教程</a>。</p>
<p>配置完成后，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件（如果使用默认名），这两个就是SSH的密钥对，<code>id_rsa</code>是私钥，不能泄漏，而<code>id_rsa.pub</code>是公钥，复制粘贴到GitHub设置里。</p>
<p>GitHub允许你添加多个SSH密钥对。如果你使用多台电脑工作，只要把每台电脑的公钥都添加到GitHub设置里，就可以在每台电脑上往GitHub远程仓库拉取和推送了。</p>
<h3 id="配置gpg">配置GPG</h3>
<p>我们查看仓库的<code>commit</code>历史时，发现有带<code>Verified</code>的绿色标记：
<img src="https://kohsruhe-image.oss-cn-shanghai.aliyuncs.com/images/verified-commit.png" alt="Verified Commit"></p>
<p>该标记表示这一次<code>commit</code>是经过签名验证的（signed with a verified signature）。配置过程参考<a href="https://docs.github.com/en/enterprise-server@3.7/authentication/managing-commit-signature-verification">官方教程</a>。</p>
<h3 id="克隆远程仓库">克隆远程仓库</h3>
<p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p>
<blockquote>
<p>Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快。</p>
</blockquote>
<p>如果本地仓库已经有了，那怎么办？新建一个空的远程仓库，再进行关联。</p>
<h3 id="关联远程仓库">关联远程仓库</h3>
<p>关联和添加远程仓库使用<code>git remote add</code>命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git remote add origin &lt;git@newempty.git&gt;  <span class="c1"># 关联一个远程仓库</span>
</span></span></code></pre></div><blockquote>
<p><code>origin</code>是远程仓库的名字，这是Git默认的叫法，也可以改成别的。</p>
</blockquote>
<p>把本地库的内容推送到远程，用<code>git push</code>命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git push -u origin master  <span class="c1"># 推送当前分支到远程master分支</span>
</span></span></code></pre></div><blockquote>
<p>如果远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的分支内容推送到远程的<code>master</code>分支，还会把本地分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
</blockquote>
<p>从今往后，只要本地作了提交，就可以通过<code>git push origin master</code>命令提交修改。</p>
<h3 id="解除远程关联">解除远程关联</h3>
<p>如果添加的时候地址写错了，或者就是想解除关联，可以用<code>git remote rm &lt;repo name&gt;</code>命令。</p>
<p>使用前，建议先用<code>git remote -v</code>查看远程库信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git remote -v  <span class="c1"># 查看远程库信息</span>
</span></span><span class="line"><span class="cl">origin	git@github.com:leehyon/kohsruhe-site.git <span class="o">(</span>fetch<span class="o">)</span>
</span></span><span class="line"><span class="cl">origin	git@github.com:leehyon/kohsruhe-site.git <span class="o">(</span>push<span class="o">)</span>
</span></span></code></pre></div><p>然后，根据名字解除，比如<code>git remote rm origin</code>。</p>
<h2 id="核心逻辑二分支管理指针">核心逻辑二：分支管理（指针）</h2>
<p>当我们创建新的分支<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的一个<code>commit</code>，再把<code>HEAD</code>指针指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git switch -c dev  <span class="c1"># 创建dev分支并切换</span>
</span></span></code></pre></div><p><code>git switch</code>命令加上<code>-c</code>参数表示创建并切换，相当于以下两条命令：</p>
<ul>
<li><code>git branch dev</code></li>
<li><code>git switch dev</code></li>
</ul>
<blockquote>
<p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，更改<code>HEAD</code>的指向，没有更改工作区内容。</p>
</blockquote>
<p><code>git branch</code>命令会列出所有分支，带<code>*</code>号的为当前分支。</p>
<p>从现在开始，对工作区的修改和提交都是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针保持不变：</p>
<p><img src="https://kohsruhe-image.oss-cn-shanghai.aliyuncs.com/images/branch_point.png" alt="New Branch"></p>
<p>如果我们在<code>dev</code>分支上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。那Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交。</p>
<p>所以Git合并分支也很快，就改改指针，也没有更改工作区内容。</p>
<p>合并分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，就剩<code>master</code>分支了。</p>
<p>到此为止，应该明白<strong>针对分支的操作其实是针对指针的操作</strong>。了解完这一点，Git就没啥了。</p>
<h3 id="分支管理策略">分支管理策略</h3>
<p>在实际开发中，应该按照怎么样的策略进行分支管理呢？</p>
<ul>
<li>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活</li>
<li>干活都在<code>dev</code>分支上，等到新版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，并在<code>master</code>分支发布新版本</li>
<li>修复bug时，建议通过创建新的bug分支进行修复，然后合并，最后删除
<ul>
<li>bug分支只用在本地修复bug，就没必要推到远程了</li>
</ul>
</li>
<li>开发一个新feature，最好新建一个分支</li>
</ul>
<h3 id="多人协作">多人协作</h3>
<p>多人协作的工作模式通常是这样：</p>
<ol>
<li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改</li>
<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并</li>
<li>如果合并有冲突，则解决冲突，并在本地提交</li>
<li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送修改</li>
</ol>
<h2 id="标签管理">标签管理</h2>
<p>标签是版本库的一个快照。</p>
<p>Git的标签其实是指向某个<code>commit</code>的指针，同前面提到的分支类似，但区别是分支的指针可以移动，而标签不能移动（可以理解为一个<strong>常量指针</strong>）。</p>
<ul>
<li><code>git tag &lt;tagname&gt;</code> 新建一个标签，默认为<code>HEAD</code>，也可以指定一个<code>commit id</code></li>
<li><code>git tag -a &lt;tagname&gt; -m &quot;&lt;message&gt;&quot;</code> 指定标签信息</li>
<li><code>git tag</code> 查看所有标签</li>
<li><code>git push origin &lt;tagname&gt;</code> 推送一个本地标签</li>
<li><code>git push origin --tags</code> 推送全部未推送过的本地标签</li>
<li><code>git tag -d &lt;tagname&gt;</code> 删除一个本地标签</li>
<li><code>git push origin :refs/tags/&lt;tagname&gt;</code> 删除一个远程标签</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站</a></li>
<li><a href="https://git-scm.com/book/en/v2">Git - Book</a></li>
<li><a href="https://docs.github.com/en/enterprise-server@3.7/authentication/connecting-to-github-with-ssh">Connecting to GitHub with SSH</a></li>
<li><a href="https://docs.github.com/en/enterprise-server@3.7/authentication/managing-commit-signature-verification">Managing commit signature verification</a></li>
<li><a href="https://education.github.com/git-cheat-sheet-education.pdf">Git Cheat Sheet</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>信创是短期炒作还是基本面驱动</title><link>https://www.kohsruhe.com/zh/2022/11/19/talk-about-infono/</link><pubDate>Sat, 19 Nov 2022 20:37:56 +0800</pubDate><guid>https://www.kohsruhe.com/zh/2022/11/19/talk-about-infono/</guid><description>♪ 超人 - 五月天 前言 ❗️ 本文内容不构成任何投资建议，仅是个人观点。投资有风险，交易需谨慎！ “当我们在谈论一个行业的时候，我们到底在谈论什么？而</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audio/life_live.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>♪ 超人 - 五月天</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<blockquote>
<p>❗️ 本文内容不构成任何投资建议，仅是个人观点。投资有风险，交易需谨慎！</p>
</blockquote>
<p>“当我们在谈论一个行业的时候，我们到底在谈论什么？而当我们在炒股的时候，我们又在炒什么？”这是我近期一直在思考的一个问题。</p>
<p>其实最开始接触信创这个概念的时候，我也是一头雾水，但看那些连板标的，想着如果我稍微多了解一点是不是也可以喝点汤。当然市场行情瞬息万变，近期板块轮动也是捉摸不定，像我这种小散户大概率是被割韭菜的命。但是，如果有那么一种策略，平衡我有限的精力和承受的风险，那应该是最praktisch的。如何在政策引导下快速关注一个行业情况，并思考它的底层逻辑和基本面演绎，确实是我需要学习的一课。</p>
<p>本打算是以信创为引子写点投资框架的感悟，但认识肤浅还是算了。</p>
<h2 id="信创是什么">信创是什么</h2>
<blockquote>
<p>信创，即信息技术应用创新产业，旨在实现信息技术领域的自主可控，保障国家信息安全。其核心在于通过行业应用拉动构建国产化信息技术软硬件底层架构体系和全周期生态体系，解决核心技术关键环节“卡脖子”问题。信创产业是数字经济、信息安全发展的基础，也是“新基建”的重要内容，将成为拉动中国经济增长的重要抓手之一。</p>
</blockquote>
<p>在谈论信创之前先讲讲大背景。</p>
<p>信创其实并不是一件新的东西，只是最近伴随政策催化而引发市场热议。信创的重要性不言而喻，特别是对整个现代化办公过程的发展。早在2016年国家就提到了信息产业的安全可控。从那时起，信创这一概念逐渐扩展到从底层芯片到上层应用的整个产业化过程。</p>
<p><img src="https://kohsruhe-image.oss-cn-shanghai.aliyuncs.com/images/infono_system.png" alt="Infono System"></p>
<p>狭义的信创指支撑党政办公所需的东西，比如办公软件、数据库这些，也就是国家提出的“2+8+N”体系中的“2”。目前这个节点信创已发展成了一个更广义的概念，涉及“8+N”，包括金融、电信电力和石油交通等多个行业，它不仅指那些通用的支撑办公的软硬件，还涉及核心组件的国产化等多个环节。</p>
<p>信创概念在2019年-2020年就发酵过一轮，只不过那个阶段完成的是从0到1这个过程。而从目前这个节点往后看，信创不管从时间上还是空间上看应该都有一个较大的预期。</p>
<h2 id="最近为什么会火">最近为什么会火</h2>
<p>我们先回头看上一轮的信创发酵的过程。当时由于外部环境的原因，十九大报告着重提了安全和发展。另外中美关系也从那时起变得微妙，特别是2019年以来，美国持续打压以华为为代表的中国科技公司。国家相继出台了很多措施来加大对核心技术环节的支持力度，信创概念持续发酵。不过，到2020年6、7月份，由于产业成熟度不够、同时叠加疫情影响而没能继续往上走。</p>
<p>上一轮可以说是一个摸索的过程，主要完成了一个前期的准备工作。</p>
<p>而这一轮是在从二十大开始，会上国家对安全的重要性提升很大，这在业内是超预期的。</p>
<p>从时间上看，至少到明年信创还是具备持续的基础，目前有两个方向的期待：一是各种细化政策的制定和推出，应该会有持续刺激；二是明年党政央企的采购工作规划。</p>
<p>从空间上看，在自主可控政策驱动下，这一轮对产业带来的空间应该是非常可观的。上一轮有点操之过急，产业成熟度不够，但这一轮具备全面推开的条件。</p>
<h2 id="投资板块">投资板块</h2>
<p>从上图可以看出，信创主要包含三大部分：基础硬件、基础软件和应用软件。</p>
<p>基础硬件包括PC整机、服务器整机和外设等：</p>
<ul>
<li>服务器：神州数码（鲲鹏）和中科曙光（海光）</li>
<li>外设：纳思达（打印机替换）</li>
</ul>
<p>基础软件包括操作系统、中间件和数据库三个类别：</p>
<ul>
<li>操作系统：中国软件和诚迈科技</li>
<li>中间件：东方通和宝兰德</li>
<li>数据库：太极股份和海量数据（华为高斯）</li>
</ul>
<p>应用软件包括邮箱和办公软件，比如金山办公。</p>
<h2 id="短期炒作还是业绩支撑">短期炒作还是业绩支撑</h2>
<h3 id="时间层面">时间层面</h3>
<p>信创从短期和中线两个维度上看都是有持续性的：</p>
<ul>
<li>短期来讲，从现在到春节前应该会有各种细化政策的出台</li>
<li>中线上看（两到三年），目前位置也仅仅是估值修复。这一轮高点应该是具体订单的落地，同时伴随一些关键行业渗透率创新高</li>
</ul>
<h3 id="空间层面">空间层面</h3>
<p>首先思考一个问题：上一轮完成了多少的渗透率？这一轮呢？（我没有具体数据，但逻辑应该是这样的）</p>
<p>政策从制定到执行再到落地需要一个过程，可以关注明后年的订单和行业增速节奏。明年业绩会兑现一部分，但整个过程至少会持续到2025年前后。</p>
<h2 id="再谈数字经济">再谈数字经济</h2>
<p>数字经济的核心是整个社会数字化过程，包括三个方向和两个建设：</p>
<ul>
<li>政府数字化：是基座</li>
<li>行业数字化：特别是央企和国企</li>
<li>安全：之前数字化不够高，对安全不够重视，等数字经济建设成熟了会带来安全的拐点和加速</li>
<li>数字货币：基础设施建设和运营推广（商户端）两个阶段</li>
<li>数字ID：身份证</li>
</ul>
<h2 id="操作建议">操作建议</h2>
<ul>
<li>中线是起点，有回调就入，买一些有估值支撑的</li>
<li>短线是有机会的，但要观察是否有其他更强的方向，比如疫情放开</li>
<li>数据库可做重点关注</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li>图片来源：<a href="https://www.whbluestar.com/xc.html">国家信创产业-蓝星科技</a></li>
</ol>
</blockquote>
]]></content:encoded></item></channel></rss>