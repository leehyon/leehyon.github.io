<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Kohsruhe</title><link>https://www.kohsruhe.com/en/</link><description>Recent content on Kohsruhe</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 20 Nov 2022 16:59:39 +0800</lastBuildDate><atom:link href="https://www.kohsruhe.com/en/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Quick Guide</title><link>https://www.kohsruhe.com/en/2022/11/20/git-quick-guide/</link><pubDate>Sun, 20 Nov 2022 16:59:39 +0800</pubDate><guid>https://www.kohsruhe.com/en/2022/11/20/git-quick-guide/</guid><description>♪ 超人 - 五月天 前言 本文主要内容参考自Git教程 - 廖雪峰的官方网站，同时结合自己的使用习惯稍作修改。 对任何软件的使用，首先要明确自己的需求，虽</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audio/life_live.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>♪ 超人 - 五月天</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<p>本文主要内容参考自<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站</a>，同时结合自己的使用习惯稍作修改。</p>
<p>对任何软件的使用，首先要<strong>明确自己的需求</strong>，虽然我之前就知道Git，但直到最近由于工作需要才开始接触命令行操作，一旦会了就基本告别GUI了。其次是<strong>抓住软件的底层逻辑</strong>，比如Git的核心是stage（暂存区）和指针，明白这两个概念，其他很多内容都不言自明了。</p>
<h2 id="git是什么">Git是什么</h2>
<p>Git是目前世界上最先进的<strong>分布式</strong>版本控制系统，即Distributed Version Control System (DVCS)，由大神Linus开发完成，他同时也是开源Linux创建者。</p>
<h3 id="集中式和分布式">集中式和分布式</h3>
<p>集中式版本控制系统，顾名思义是有一个中央服务器存储你的版本库。每次版本的更新和提交都需要你连接和上传到中央服务器。</p>
<p>而分布式版本控制系统没有中央服务器的概念，<strong>每个人的本地电脑都是一个完整的版本库</strong>，版本的更新和提交都发生在你自己的电脑上。</p>
<p>现在请思考：</p>
<ul>
<li>如果每个人的电脑都有一个完整的版本库，那么该怎么实现多人协作？</li>
<li>相比集中式，分布式有什么优点？</li>
</ul>
<h2 id="安装和配置">安装和配置</h2>
<p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads">下载安装程序</a>，然后按默认选项安装即可。</p>
<p>安装完成后，右键开始菜单找到<code>Git Bash</code>，弹出一个带颜色的命令行窗口，输入<code>git -v</code>能查到版本信息就代表安装成功。</p>
<h3 id="用户信息配置">用户信息配置</h3>
<p>安装完成后的第一步是配置你的个人信息，因为Git是分布式的，每台电脑需要自报家门。</p>
<p>在命令行输入以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git config --global user.name <span class="s2">&#34;Your Name&#34;</span>
</span></span><span class="line"><span class="cl">$ git config --global user.email <span class="s2">&#34;email@example.com&#34;</span>
</span></span></code></pre></div><blockquote>
<p>你的信息保存在全局配置文件<code>~/.gitconfig</code>中，你也可以通过<code>git config --list</code>命令确认你的信息。</p>
</blockquote>
<p>命令中的<code>--global</code>参数，表示你这台电脑上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<ul>
<li>即在需要单独配置的仓库源目录下运行<code>git config</code>命令，省略<code>--global</code></li>
</ul>
<h2 id="版本管理">版本管理</h2>
<blockquote>
<p>版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
</blockquote>
<h3 id="创建版本库">创建版本库</h3>
<p><code>git init</code>命令可以把一个目录变成Git可以管理的仓库。</p>
<ul>
<li>创建后，该目录下会多一个<code>.git</code>的子目录，这个目录是Git来跟踪管理版本库的，该目录默认隐藏</li>
</ul>
<h3 id="添加和修改">添加和修改</h3>
<p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，而<code>git diff</code>命令可以对比修改的内容。</p>
<p>提交修改和提交新文件是一样的两步（从这里可以看出Git跟踪的是<strong>修改</strong>而不是文件），先<code>git add</code>，再<code>git commit</code>。</p>
<ul>
<li><code>git add .</code>可以添加所有的修改</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s2">&#34;# Git is fun&#34;</span> &gt;&gt; README.md
</span></span><span class="line"><span class="cl">$ git add README.md
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;add readme&#34;</span>
</span></span></code></pre></div><h3 id="版本控制">版本控制</h3>
<p><code>git log</code>命令显示从最近到最远的提交日志。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">leehyon@Kohs-MacBook kohsruhe % git log
</span></span><span class="line"><span class="cl">commit fa9c94b19b0347a61c5e72b556947d9f86fefb21 <span class="o">(</span>HEAD -&gt; main, origin/main<span class="o">)</span>
</span></span><span class="line"><span class="cl">Author: Leehyon Koh &lt;leehyon@live.com&gt;
</span></span><span class="line"><span class="cl">Date:   Sun Nov <span class="m">20</span> 16:43:58 <span class="m">2022</span> +0800
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">test</span> aliyun image hub
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">commit 7381263185e996491d84cde9f15520fe88afb379
</span></span><span class="line"><span class="cl">Author: Leehyon Koh &lt;leehyon@live.com&gt;
</span></span><span class="line"><span class="cl">Date:   Sun Nov <span class="m">20</span> 14:24:38 <span class="m">2022</span> +0800
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    add first article
</span></span></code></pre></div><p><code>commit</code>后面跟的一大串数字就是版本号，即<code>commit id</code>。</p>
<ul>
<li>思考：为什么Git的版本号不像SVN一样以数字迭代的？</li>
</ul>
<p>那么有了版本号是不是可以在不同版本间跳转了呢？那的确是的。不过Git必须首先知道当前是哪个版本。</p>
<p>在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交的<code>fa9c9...</code>，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本请写成<code>HEAD~100</code>。</p>
<p>使用<code>git reset</code>命令，并添加<code>Head</code>信息或指定版本号来实现版本回退：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git reset --hard HEAD^  <span class="c1"># 回退到上一版本</span>
</span></span><span class="line"><span class="cl">$ git reset --hard <span class="m">73812</span>  <span class="c1"># 或指定版本号</span>
</span></span></code></pre></div><p>Git的版本回退速度非常快，因为它仅仅更改了<code>HEAD</code>的指向。这里是重点，后面提到的<strong>分支管理</strong>也是基于指针的操作。</p>
<p>思考：回到过去后，突然反悔了又想回到未来怎么办？</p>
<ul>
<li>Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令，找到需要返回的<code>commit id</code></li>
</ul>
<h2 id="核心逻辑一暂存区">核心逻辑一：暂存区</h2>
<p><code>.git</code>目录是Git的版本库，里面存了非常重要的两个东西：</p>
<ul>
<li>一是被称为stage的暂存区</li>
<li>二是Git自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个<code>HEAD</code>指针</li>
</ul>
<p><img src="https://kohsruhe-image.oss-cn-shanghai.aliyuncs.com/images/stage.png" alt="Stage"></p>
<p>前面讲了我们把文件往Git版本库里添加是分两步执行的：</p>
<ol>
<li><code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区</li>
<li><code>git commit</code>提交修改，实际上就是把暂存区的所有内容提交到当前分支</li>
</ol>
<p>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是<strong>修改</strong>，而非文件。每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>git commit</code>中。</p>
<p>思考：什么是修改？什么又是文件？</p>
<h3 id="撤销修改">撤销修改</h3>
<p>先看下面一条命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout -- README.md
</span></span></code></pre></div><p>意思是，把<code>README.md</code>文件在工作区的修改全部撤销，这里有两种情况：</p>
<ol>
<li><code>README.md</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态</li>
<li><code>README.md</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态</li>
</ol>
<p><code>git checkout -- &lt;file&gt;</code>命令中的“<code>--</code>”很重要，没有“<code>--</code>”，就变成了“切换到另一个分支”。</p>
<ul>
<li>一种可选的方法是：用<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区</li>
</ul>
<p>注意：这里所指的撤销都是基于还没有<code>git commit</code>的。</p>
<p>每次在撤销或修改操作时，建议先用<code>git status</code>查看仓库状态。</p>
<p>思考：如果已经把暂存区提交到了版本库了，该怎么办？</p>
<h2 id="远程仓库">远程仓库</h2>
<p>GitHub是基于Git的一个面向开源及私有软件项目的<strong>托管平台</strong>。除了GitHub，其他的还有比如<a href="https://about.gitlab.com/">GitLab</a>和<a href="https://gitee.com/">Gitee</a>等。</p>
<h3 id="配置ssh">配置SSH</h3>
<p>由于本地仓库和GitHub仓库之间的传输是通过SSH协议加密的，所以需要首先配置SSH。配置过程参考<a href="https://docs.github.com/en/enterprise-server@3.7/authentication/connecting-to-github-with-ssh">官方教程</a>。</p>
<p>配置完成后，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件（如果使用默认名），这两个就是SSH的密钥对，<code>id_rsa</code>是私钥，不能泄漏，而<code>id_rsa.pub</code>是公钥，复制粘贴到GitHub设置里。</p>
<p>GitHub允许你添加多个SSH密钥对。如果你使用多台电脑工作，只要把每台电脑的公钥都添加到GitHub设置里，就可以在每台电脑上往GitHub远程仓库拉取和推送了。</p>
<h3 id="配置gpg">配置GPG</h3>
<p>我们查看仓库的<code>commit</code>历史时，发现有带<code>Verified</code>的绿色标记：
<img src="https://kohsruhe-image.oss-cn-shanghai.aliyuncs.com/images/verified-commit.png" alt="Verified Commit"></p>
<p>该标记表示这一次<code>commit</code>是经过签名验证的（signed with a verified signature）。配置过程参考<a href="https://docs.github.com/en/enterprise-server@3.7/authentication/managing-commit-signature-verification">官方教程</a>。</p>
<h3 id="克隆远程仓库">克隆远程仓库</h3>
<p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p>
<blockquote>
<p>Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快。</p>
</blockquote>
<p>如果本地仓库已经有了，那怎么办？新建一个空的远程仓库，再进行关联。</p>
<h3 id="关联远程仓库">关联远程仓库</h3>
<p>关联和添加远程仓库使用<code>git remote add</code>命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git remote add origin &lt;git@newempty.git&gt;  <span class="c1"># 关联一个远程仓库</span>
</span></span></code></pre></div><blockquote>
<p><code>origin</code>是远程仓库的名字，这是Git默认的叫法，也可以改成别的。</p>
</blockquote>
<p>把本地库的内容推送到远程，用<code>git push</code>命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git push -u origin master  <span class="c1"># 推送当前分支到远程master分支</span>
</span></span></code></pre></div><blockquote>
<p>如果远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的分支内容推送到远程的<code>master</code>分支，还会把本地分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
</blockquote>
<p>从今往后，只要本地作了提交，就可以通过<code>git push origin master</code>命令提交修改。</p>
<h3 id="解除远程关联">解除远程关联</h3>
<p>如果添加的时候地址写错了，或者就是想解除关联，可以用<code>git remote rm &lt;repo name&gt;</code>命令。</p>
<p>使用前，建议先用<code>git remote -v</code>查看远程库信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git remote -v  <span class="c1"># 查看远程库信息</span>
</span></span><span class="line"><span class="cl">origin	git@github.com:leehyon/kohsruhe-site.git <span class="o">(</span>fetch<span class="o">)</span>
</span></span><span class="line"><span class="cl">origin	git@github.com:leehyon/kohsruhe-site.git <span class="o">(</span>push<span class="o">)</span>
</span></span></code></pre></div><p>然后，根据名字解除，比如<code>git remote rm origin</code>。</p>
<h2 id="核心逻辑二分支管理指针">核心逻辑二：分支管理（指针）</h2>
<p>当我们创建新的分支<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的一个<code>commit</code>，再把<code>HEAD</code>指针指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git switch -c dev  <span class="c1"># 创建dev分支并切换</span>
</span></span></code></pre></div><p><code>git switch</code>命令加上<code>-c</code>参数表示创建并切换，相当于以下两条命令：</p>
<ul>
<li><code>git branch dev</code></li>
<li><code>git switch dev</code></li>
</ul>
<blockquote>
<p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，更改<code>HEAD</code>的指向，没有更改工作区内容。</p>
</blockquote>
<p><code>git branch</code>命令会列出所有分支，带<code>*</code>号的为当前分支。</p>
<p>从现在开始，对工作区的修改和提交都是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针保持不变：</p>
<p><img src="https://kohsruhe-image.oss-cn-shanghai.aliyuncs.com/images/branch_point.png" alt="New Branch"></p>
<p>如果我们在<code>dev</code>分支上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。那Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交。</p>
<p>所以Git合并分支也很快，就改改指针，也没有更改工作区内容。</p>
<p>合并分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，就剩<code>master</code>分支了。</p>
<p>到此为止，应该明白<strong>针对分支的操作其实是针对指针的操作</strong>。了解完这一点，Git就没啥了。</p>
<h3 id="分支管理策略">分支管理策略</h3>
<p>在实际开发中，应该按照怎么样的策略进行分支管理呢？</p>
<ul>
<li>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活</li>
<li>干活都在<code>dev</code>分支上，等到新版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，并在<code>master</code>分支发布新版本</li>
<li>修复bug时，建议通过创建新的bug分支进行修复，然后合并，最后删除
<ul>
<li>bug分支只用在本地修复bug，就没必要推到远程了</li>
</ul>
</li>
<li>开发一个新feature，最好新建一个分支</li>
</ul>
<h3 id="多人协作">多人协作</h3>
<p>多人协作的工作模式通常是这样：</p>
<ol>
<li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改</li>
<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并</li>
<li>如果合并有冲突，则解决冲突，并在本地提交</li>
<li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送修改</li>
</ol>
<h2 id="标签管理">标签管理</h2>
<p>标签是版本库的一个快照。</p>
<p>Git的标签其实是指向某个<code>commit</code>的指针，同前面提到的分支类似，但区别是分支的指针可以移动，而标签不能移动（可以理解为一个<strong>常量指针</strong>）。</p>
<ul>
<li><code>git tag &lt;tagname&gt;</code> 新建一个标签，默认为<code>HEAD</code>，也可以指定一个<code>commit id</code></li>
<li><code>git tag -a &lt;tagname&gt; -m &quot;&lt;message&gt;&quot;</code> 指定标签信息</li>
<li><code>git tag</code> 查看所有标签</li>
<li><code>git push origin &lt;tagname&gt;</code> 推送一个本地标签</li>
<li><code>git push origin --tags</code> 推送全部未推送过的本地标签</li>
<li><code>git tag -d &lt;tagname&gt;</code> 删除一个本地标签</li>
<li><code>git push origin :refs/tags/&lt;tagname&gt;</code> 删除一个远程标签</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站</a></li>
<li><a href="https://git-scm.com/book/en/v2">Git - Book</a></li>
<li><a href="https://docs.github.com/en/enterprise-server@3.7/authentication/connecting-to-github-with-ssh">Connecting to GitHub with SSH</a></li>
<li><a href="https://docs.github.com/en/enterprise-server@3.7/authentication/managing-commit-signature-verification">Managing commit signature verification</a></li>
<li><a href="https://education.github.com/git-cheat-sheet-education.pdf">Git Cheat Sheet</a></li>
</ol>
</blockquote>
]]></content:encoded></item><item><title>Infono, Short-term Hype or Fundamentals-driven</title><link>https://www.kohsruhe.com/en/2022/11/19/talk-about-infono/</link><pubDate>Sat, 19 Nov 2022 20:37:56 +0800</pubDate><guid>https://www.kohsruhe.com/en/2022/11/19/talk-about-infono/</guid><description>♪ 超人 - 五月天 前言 ❗️ 本文内容不构成任何投资建议，仅是个人观点，不具任何指导作用。投资有风险，交易需谨慎！ “当我们在谈论一个行业的时候，我们</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audio/life_live.mp3" type="audio/mpeg">
    </audio>
    <i><figcaption>♪ 超人 - 五月天</figcaption></i>
</figure>
<h2 id="前言">前言</h2>
<blockquote>
<p>❗️ 本文内容不构成任何投资建议，仅是个人观点，不具任何指导作用。投资有风险，交易需谨慎！</p>
</blockquote>
<p>“当我们在谈论一个行业的时候，我们到底在谈论什么？而当我们在炒股的时候，我们又在炒什么？”这是我近期一直在思考的一个问题。</p>
<p>其实最开始接触信创这个概念的时候，我也是一头雾水，但看那些连板标的，想着如果我稍微多了解一点是不是也可以喝点汤。当然市场行情瞬息万变，近期板块轮动也是捉摸不定，像我这种小散户大概率是被割韭菜的命。但是，如果有那么一种策略，平衡我有限的精力和承受的风险，那应该是最praktisch的。如何在政策引导下快速关注一个行业情况，并思考它的底层逻辑和基本面演绎，确实是我需要学习的一课。</p>
<p>本打算是以信创为引子写点投资框架的感悟，但认识肤浅还是算了。</p>
<h2 id="信创是什么">信创是什么</h2>
<blockquote>
<p>信创，即信息技术应用创新产业，旨在实现信息技术领域的自主可控，保障国家信息安全。其核心在于通过行业应用拉动构建国产化信息技术软硬件底层架构体系和全周期生态体系，解决核心技术关键环节“卡脖子”问题。信创产业是数字经济、信息安全发展的基础，也是“新基建”的重要内容，将成为拉动中国经济增长的重要抓手之一。</p>
</blockquote>
<p>在谈论信创之前先讲讲大背景。</p>
<p>信创其实并不是一件新的东西，只是最近伴随政策催化而引发市场热议。信创的重要性不言而喻，特别是对整个现代化办公过程的发展。早在2016年国家就提到了信息产业的安全可控。从那时起，信创这一概念逐渐扩展到从底层芯片到上层应用的整个产业化过程。</p>
<p><img src="https://kohsruhe-image.oss-cn-shanghai.aliyuncs.com/images/infono_system.png" alt="Infono System"></p>
<p>狭义的信创指支撑党政办公所需的东西，比如办公软件、数据库这些，也就是国家提出的“2+8+N”体系中的“2”。目前这个节点信创已发展成了一个更广义的概念，涉及“8+N”，包括金融、电信电力和石油交通等多个行业，它不仅指那些通用的支撑办公的软硬件，还涉及核心组件的国产化等多个环节。</p>
<p>信创概念在2019年-2020年就发酵过一轮，只不过那个阶段完成的是从0到1这个过程。而从目前这个节点往后看，信创不管从时间上还是空间上看应该都有一个较大的预期。</p>
<h2 id="最近为什么会火">最近为什么会火</h2>
<p>我们先回头看上一轮的信创发酵的过程。当时由于外部环境的原因，十九大报告着重提了安全和发展。另外中美关系也从那时起变得微妙，特别是2019年以来，美国持续打压以华为为代表的中国科技公司。国家相继出台了很多措施来加大对核心技术环节的支持力度，信创概念持续发酵。不过，到2020年6、7月份，由于产业成熟度不够、同时叠加疫情影响而没能继续往上走。</p>
<p>上一轮可以说是一个摸索的过程，主要完成了一个前期的准备工作。</p>
<p>而这一轮是在从二十大开始，会上国家对安全的重要性提升很大，这在业内是超预期的。</p>
<p>从时间上看，至少到明年信创还是具备持续的基础，目前有两个方向的期待：一是各种细化政策的制定和推出，应该会有持续刺激；二是明年党政央企的采购工作规划。</p>
<p>从空间上看，在自主可控政策驱动下，这一轮对产业带来的空间应该是非常可观的。上一轮有点操之过急，产业成熟度不够，但这一轮具备全面推开的条件。</p>
<h2 id="投资板块">投资板块</h2>
<p>从上图可以看出，信创主要包含三大部分：基础硬件、基础软件和应用软件。</p>
<p>基础硬件包括PC整机、服务器整机和外设等：</p>
<ul>
<li>服务器：神州数码（鲲鹏）和中科曙光（海光）</li>
<li>外设：纳思达（打印机替换）</li>
</ul>
<p>基础软件包括操作系统、中间件和数据库三个类别：</p>
<ul>
<li>操作系统：中国软件和诚迈科技</li>
<li>中间件：东方通和宝兰德</li>
<li>数据库：太极股份和海量数据（华为高斯）</li>
</ul>
<p>应用软件包括邮箱和办公软件，比如金山办公。</p>
<h2 id="短期炒作还是业绩支撑">短期炒作还是业绩支撑</h2>
<h3 id="时间层面">时间层面</h3>
<p>信创从短期和中线两个维度上看都是有持续性的：</p>
<ul>
<li>短期来讲，从现在到春节前应该会有各种细化政策的出台</li>
<li>中线上看（两到三年），目前位置也仅仅是估值修复。这一轮高点应该是具体订单的落地，同时伴随一些关键行业渗透率创新高</li>
</ul>
<h3 id="空间层面">空间层面</h3>
<p>首先思考一个问题：上一轮完成了多少的渗透率？这一轮呢？（我没有具体数据，但逻辑应该是这样的）</p>
<p>政策从制定到执行再到落地需要一个过程，可以关注明后年的订单和行业增速节奏。明年业绩会兑现一部分，但整个过程至少会持续到2025年前后。</p>
<h2 id="再谈数字经济">再谈数字经济</h2>
<p>数字经济的核心是整个社会数字化过程，包括三个方向和两个建设：</p>
<ul>
<li>政府数字化：是基座</li>
<li>行业数字化：特别是央企和国企</li>
<li>安全：之前数字化不够高，对安全不够重视，等数字经济建设成熟了会带来安全的拐点和加速</li>
<li>数字货币：基础设施建设和运营推广（商户端）两个阶段</li>
<li>数字ID：身份证</li>
</ul>
<h2 id="操作建议">操作建议</h2>
<ul>
<li>中线是起点，有回调就入，买一些有估值支撑的</li>
<li>短线是有机会的，但要观察是否有其他更强的方向，比如疫情放开</li>
<li>数据库可做重点关注</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<blockquote>
<ol>
<li>图片来源：<a href="https://www.whbluestar.com/xc.html">国家信创产业-蓝星科技</a></li>
</ol>
</blockquote>
]]></content:encoded></item></channel></rss>